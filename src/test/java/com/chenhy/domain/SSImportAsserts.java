package com.chenhy.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SSImportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSSImportAllPropertiesEquals(SSImport expected, SSImport actual) {
        assertSSImportAutoGeneratedPropertiesEquals(expected, actual);
        assertSSImportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSSImportAllUpdatablePropertiesEquals(SSImport expected, SSImport actual) {
        assertSSImportUpdatableFieldsEquals(expected, actual);
        assertSSImportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSSImportAutoGeneratedPropertiesEquals(SSImport expected, SSImport actual) {
        assertThat(actual)
            .as("Verify SSImport auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSSImportUpdatableFieldsEquals(SSImport expected, SSImport actual) {
        assertThat(actual)
            .as("Verify SSImport relevant properties")
            .satisfies(a -> assertThat(a.getUuid()).as("check uuid").isEqualTo(expected.getUuid()))
            .satisfies(a -> assertThat(a.getSsCreateBy()).as("check ssCreateBy").isEqualTo(expected.getSsCreateBy()))
            .satisfies(a -> assertThat(a.getSsFilename()).as("check ssFilename").isEqualTo(expected.getSsFilename()))
            .satisfies(a -> assertThat(a.getSsBCode()).as("check ssBCode").isEqualTo(expected.getSsBCode()))
            .satisfies(a -> assertThat(a.getSsSubBCode()).as("check ssSubBCode").isEqualTo(expected.getSsSubBCode()))
            .satisfies(a -> assertThat(a.getCreateBy()).as("check createBy").isEqualTo(expected.getCreateBy()))
            .satisfies(a -> assertThat(a.getCreateTime()).as("check createTime").isEqualTo(expected.getCreateTime()))
            .satisfies(a -> assertThat(a.getUpdateBy()).as("check updateBy").isEqualTo(expected.getUpdateBy()))
            .satisfies(a -> assertThat(a.getUpdateTime()).as("check updateTime").isEqualTo(expected.getUpdateTime()))
            .satisfies(a -> assertThat(a.getDelFlag()).as("check delFlag").isEqualTo(expected.getDelFlag()))
            .satisfies(a -> assertThat(a.getRemark()).as("check remark").isEqualTo(expected.getRemark()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSSImportUpdatableRelationshipsEquals(SSImport expected, SSImport actual) {
        // empty method
    }
}
