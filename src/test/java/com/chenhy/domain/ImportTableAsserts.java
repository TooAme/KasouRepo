package com.chenhy.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ImportTableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImportTableAllPropertiesEquals(ImportTable expected, ImportTable actual) {
        assertImportTableAutoGeneratedPropertiesEquals(expected, actual);
        assertImportTableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImportTableAllUpdatablePropertiesEquals(ImportTable expected, ImportTable actual) {
        assertImportTableUpdatableFieldsEquals(expected, actual);
        assertImportTableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImportTableAutoGeneratedPropertiesEquals(ImportTable expected, ImportTable actual) {
        assertThat(actual)
            .as("Verify ImportTable auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImportTableUpdatableFieldsEquals(ImportTable expected, ImportTable actual) {
        assertThat(actual)
            .as("Verify ImportTable relevant properties")
            .satisfies(a -> assertThat(a.getUuid()).as("check uuid").isEqualTo(expected.getUuid()))
            .satisfies(a -> assertThat(a.getPartNumber()).as("check partNumber").isEqualTo(expected.getPartNumber()))
            .satisfies(a -> assertThat(a.getPartType()).as("check partType").isEqualTo(expected.getPartType()))
            .satisfies(a -> assertThat(a.getValue()).as("check value").isEqualTo(expected.getValue()))
            .satisfies(a -> assertThat(a.getSchematicPart()).as("check schematicPart").isEqualTo(expected.getSchematicPart()))
            .satisfies(a -> assertThat(a.getRatingVoltage()).as("check ratingVoltage").isEqualTo(expected.getRatingVoltage()))
            .satisfies(a -> assertThat(a.getRatingElectricity()).as("check ratingElectricity").isEqualTo(expected.getRatingElectricity()))
            .satisfies(a -> assertThat(a.getCharacteristics()).as("check characteristics").isEqualTo(expected.getCharacteristics()))
            .satisfies(a -> assertThat(a.getTolerance()).as("check tolerance").isEqualTo(expected.getTolerance()))
            .satisfies(a -> assertThat(a.getManufacture()).as("check manufacture").isEqualTo(expected.getManufacture()))
            .satisfies(a -> assertThat(a.getbCode()).as("check bCode").isEqualTo(expected.getbCode()))
            .satisfies(a -> assertThat(a.getPartsName()).as("check partsName").isEqualTo(expected.getPartsName()))
            .satisfies(a ->
                assertThat(a.getItemRegistrationClassification())
                    .as("check itemRegistrationClassification")
                    .isEqualTo(expected.getItemRegistrationClassification())
            )
            .satisfies(a -> assertThat(a.getSpiceModel()).as("check spiceModel").isEqualTo(expected.getSpiceModel()))
            .satisfies(a -> assertThat(a.getPcbFootPrint()).as("check pcbFootPrint").isEqualTo(expected.getPcbFootPrint()))
            .satisfies(a -> assertThat(a.getDelFlag()).as("check delFlag").isEqualTo(expected.getDelFlag()))
            .satisfies(a -> assertThat(a.getRemark()).as("check remark").isEqualTo(expected.getRemark()))
            .satisfies(a -> assertThat(a.getCreateBy()).as("check createBy").isEqualTo(expected.getCreateBy()))
            .satisfies(a -> assertThat(a.getCreateTime()).as("check createTime").isEqualTo(expected.getCreateTime()))
            .satisfies(a -> assertThat(a.getUpdateBy()).as("check updateBy").isEqualTo(expected.getUpdateBy()))
            .satisfies(a -> assertThat(a.getUpdateTime()).as("check updateTime").isEqualTo(expected.getUpdateTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImportTableUpdatableRelationshipsEquals(ImportTable expected, ImportTable actual) {
        // empty method
    }
}
